import { InvalidParametersError } from "./server";
let allTranscripts = [];
export function initialize() {
    allTranscripts = [];
    addStudent('avery', [{ course: 'DemoClass', grade: 100 }, { course: 'DemoClass2', grade: 100 }]);
    addStudent('blake', [{ course: 'DemoClass', grade: 80 }]);
    addStudent('blake', [{ course: 'DemoClass', grade: 85 }, { course: 'DemoClass', grade: 40 }]);
    addStudent('casey', [{ course: 'DemoClass', grade: 100 }]);
}
export function getAll() {
    return allTranscripts;
}
class StudentIDManager {
    static lastUsedID = 0;
    static newID() {
        this.lastUsedID++;
        return this.lastUsedID;
    }
}
export function addStudent(name, grades = []) {
    const newID = StudentIDManager.newID();
    const newStudent = { studentID: newID, studentName: name };
    allTranscripts.push({ student: newStudent, grades });
    return newID;
}
export function getTranscript(studentID) {
    return allTranscripts.find(transcript => (transcript.student.studentID == studentID));
}
export function getStudentIDs(studentName) {
    return allTranscripts.filter(transcript => (transcript.student.studentName == studentName))
        .map(transcript => transcript.student.studentID);
}
export function deleteStudent(studentID) {
    const index = allTranscripts.findIndex(t => (t.student.studentID == studentID));
    if (index == -1) {
        throw new Error(`no student with ID = ${studentID}`);
    }
    allTranscripts.splice(index, 1);
}
export function addGrade(studentID, course, grade) {
    const tIndex = allTranscripts.findIndex(t => (t.student.studentID == studentID));
    if (tIndex == -1) {
        throw new InvalidParametersError(`no student with ID = ${studentID}`);
    }
    const theTranscript = allTranscripts[tIndex];
    try {
        allTranscripts[tIndex] = addGradeToTranscript(theTranscript, course, grade);
    }
    catch (e) {
        throw new InvalidParametersError(`student ${studentID} already has a grade in course ${course}`);
    }
}
function addGradeToTranscript(theTranscript, course, grade) {
    const { grades } = theTranscript;
    if (grades.findIndex(entry => entry.course === course) != -1) {
        throw new Error();
    }
    return { student: theTranscript.student, grades: grades.concat({ course, grade }) };
}
export function getGrade(studentID, course) {
    const theTranscript = allTranscripts.find(t => t.student.studentID == studentID);
    const theGrade = theTranscript?.grades.find(g => g.course == course);
    if (theGrade === undefined) {
        throw new InvalidParametersError(`no grade for student ${studentID} in course ${course}`);
    }
    return theGrade.grade;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNjcmlwdE1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHJhbnNjcmlwdE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBU2xELElBQUksY0FBYyxHQUFpQixFQUFFLENBQUM7QUFFdEMsTUFBTSxVQUFVLFVBQVU7SUFDeEIsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUNwQixVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUQsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUYsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTTtJQUNwQixPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDO0FBR0QsTUFBTSxnQkFBZ0I7SUFDWixNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUV2QixNQUFNLENBQUMsS0FBSztRQUNqQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsT0FBTyxJQUFJLENBQUMs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